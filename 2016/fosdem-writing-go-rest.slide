Building A Go REST Application
Experiences learned during the development of Heketi
31 Jan 2016

Luis Pabón
Red Hat
lpabon@redhat.com
http://github/lpabon
@_lpabon_

* About me

Luis Pabón, Principal Software Engineer
Red Hat Storage

.image fosdem-writing-go-rest/me.jpg _ 800

* History

Needed a service to manage the GlusterFS volume lifecycle across multiple clusters.

Requirements:

- Http REST service with authentication
- Manage multiple nodes concurrently
- Maintain information on the clusters
- Simple deployment
- Allow concurrent requests
- Non-blocking

* Project Heketi

.link https://github.com/heketi/heketi

.image fosdem-writing-go-rest/heketi_overview.png _ 640

* Design

.image fosdem-writing-go-rest/arch.jpg

* Other Technologies

Python

- CherryPy, Bottlepy, Django

Ruby

- Rails, Sinatra, RESTRack

Java

- RESTx, Jersey

* Why Go?

- Easy JSON integration

- Concurrency

- Simple deployment

- Simple HTTP framework

- Integrated testing framework

- Extra one*

* HTTP/REST Standards and Definitions

*Endpoint*:

- http://server:port/<endpoint...>

*Client*Methods*:

- GET, PUT, HEAD, POST, DELETE
- More info at [[https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html][W3.org]]

*Body*:

- Contains data requested by the client. In REST calls, this could be either in XML or JSON format.

* HTTP/REST Standards and Definitions

*Head*:

- Metadata like _Content-Type_ and _Status_

*Server*Return*Status*Codes*:

- 2xx: Successful
- 3xx: Redirection
- 4xx: Client Error
- 5xx: Server Error
- More info at [[https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html][W3.org]]

* Lessons learned

* Simple Go Web server

.code fosdem-writing-go-rest/helloworld.go

* Routing

Gorilla web toolkit [[http://www.gorillatoolkit.org][www.gorillatoolkit.org]]

- *Mux*: Routing
- *Context*: Stores global variables
- *Websocket*: Implements WebSocket protocol
- Many more...

.image fosdem-writing-go-rest/gorilla-icon-64.png _ 90

* Create an App

.code fosdem-writing-go-rest/app1.go /type/,

* JSON

* JSON

- Supported by the languange

- Easy to setup by adding tags to structs

- Bool, float64, strings, slices, maps, integers, nil supported

More information at [[https://golang.org/pkg/encoding/json/][Golang.org]]

* Heketi JSON Models
Brick Information:

    type BrickInfo struct {
        Id       string `json:"id"`
        Path     string `json:"path"`
        DeviceId string `json:"device"`
        NodeId   string `json:"node"`

        // Size in KB
        Size uint64 `json:"size"`
    }

* Heketi JSON Model with Anonymous Struct

Create Volume Request:

    type VolumeCreateRequest struct {
        // Size in GB
        Size       int                  `json:"size"`
        Clusters   []string             `json:"clusters,omitempty"`
        Name       string               `json:"name"`
        Durability VolumeDurabilityInfo `json:"durability,omitempty"`
        Snapshot   struct {
            Enable bool    `json:"enable"`
            Factor float32 `json:"factor"`
        } `json:"snapshot"`
    }

* Heketi JSON Model with Embedding

    // Common accross requests and responses
    type Device struct {
        Name   string `json:"name"`
        Weight int    `json:"weight"`
    }

    // Request
    type DeviceAddRequest struct {
        Device
        NodeId string `json:"node"`
    }

    type DeviceInfo struct {
        Device
        Storage StorageSize `json:"storage"`
        Id      string      `json:"id"`
    }

    // Response
    type DeviceInfoResponse struct {
        DeviceInfo
        Bricks []BrickInfo `json:"bricks"`
    } 

* Update App to support JSON 

.code fosdem-writing-go-rest/app2.go /start JSON structs/,/end JSON structs/

* App: SaveKey()

.code fosdem-writing-go-rest/app2.go /Func Save/,/End Func Save/

* App: GetKey()

.code fosdem-writing-go-rest/app2.go /Func Get/,/End Func Get/

* App: GetAllKeys()

.code fosdem-writing-go-rest/app2.go /Func GetAll/,/End Func GetAll/

* App: Main()

.code fosdem-writing-go-rest/app2.go /Main/,/End Main/

* Logging

* Asynchronous HTTP

* BoltDB

* Concurrency

* SSH

* Middleware

* Continuous Integration

- Travis

- Coveralls

* CI - Mocking

* Versioning

* Authentication

* Deployment and Systemd

* Client - Arguments

* Client - HTTP

* Dockerizing

* Configuration

- Used JSON

- YAML used by other projects.

* Issues

- Shutting down the server
